from gcsa.google_calendar import GoogleCalendar
from gcsa.event import Event
from datetime import datetime
from beautiful_date import Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sept, Oct, Nov, Dec
from beautiful_date import hours
from openai import OpenAI
import os
from dotenv import load_dotenv
from authenticate_calendar import authenticate_calendar


def add_new_event():
    gc = authenticate_calendar()

    # predefined system prompts
    system_message_parameterdirections = """
    Your final output needs to look something like this gc.add_event.Event(summary, start, end=None, *, timezone=get_localzone_name(), event_id=None, description=None, location=None, recurrence=None)


    Here are the parameters you will need in order to make the final output:

    Parameters:
    summary (str) – Title of the event.

    start (date | datetime | BeautifulDate) – Starting date/datetime.

    end (date | datetime | BeautifulDate) – Ending date/datetime. If ‘end’ is not specified, event is considered as 1-hour event if ‘start’ is datetime.

    timezone (str) – Timezone formatted as an IANA Time Zone Database name, e.g. “Europe/Zurich”. By default, the computers local timezone is used if it is configured. UTC is used otherwise.

    event_id (str) – Opaque identifier of the event. By default, it is generated by the server. You can specify id as a 5-1024 long string of characters used in base32hex ([a-vA-V0-9]). The ID must be unique per calendar.

    description (str) – Description of the event. Can contain HTML.

    location (str) – Geographic location of the event as free-form text.

    recurrence (str | List[str]) - RRULE/RDATE/EXRULE/EXDATE string or list of such strings. See recurrence
    """
    system_message_directions = """ 
    Your goal: utilizing datetime python package ALWAYS make sure to give the output in a simple response in the following format:

    Examples:
    event1 = Event(
        "Client Call",
        start=datetime(2024, 8, 15, 14, 0, 0),
        end=datetime(2024, 8, 15, 14, 45, 0),
        description = ""
    )

    event1 = Event(
        "Weekly Sync-Up",
        start=datetime(2024, 8, 17, 10, 30, 0),
        end=datetime(2024, 8, 17, 11, 30, 0),
        description = "fill in clients on new database and make sure to ask assistant for help"
    )

    event1 = Event(
        "Workshop: AI Techniques",
        start=datetime(2024, 8, 19, 9, 0, 0),
        end=datetime(2024, 8, 19, 12, 0, 0),
        description = "contact venue if food will be offered"

    )

    If the prompt asks you to make more than one event, then create more event variables like this:

    event1 = Event(
        "Team Brainstorming Session",
        start=datetime(2024, 8, 20, 13, 0, 0),
        end=datetime(2024, 8, 20, 15, 0, 0),
        description = "fill in clients on new database and make sure to ask assistant for help"


    )

    event2 = Event(
        "Product Launch Review",
        start=datetime(2024, 8, 22, 16, 0, 0),
        end=datetime(2024, 8, 22, 17, 30, 0),
        description = "fill in clients on new database and make sure to ask assistant for help"

    )

    event3 = Event(
        "Evening Fitness Class",
        start=datetime(2024, 8, 24, 18, 30, 0),
        end=datetime(2024, 8, 24, 19, 30, 0),
        description = "fill in clients on new database and make sure to ask assistant for help"

    )

    Note: Keep the seconds value fixed at 0.
    """
    system_message_request = """ 
    Now what is your input and description? I will assume the current time as mentioned in your input and make sure the start time is your current time unless stated otherwise and will rewrite your description to better describe what you asked for as specific as possible. If it's a list of items then i will correctly format the variable.

    Now i will go ahead and convert it into the proper parameters as you had described it and then make sure to add the last line gc.add_event(event1) to complete it. If the input requires more than 1 event, then i will add on each line gc.add_event(event1) gc.add_event(event2) gc.add_event(event3) and so on. 

    I will ALWAYS ENSURE NO MATTER WHAT that the output is not in code blocks with ```PYTHON```
    """

    # user input
    current_time = datetime.now()
    user_input = input(f"{current_time}:\nwhat do you want to add???\n==> ")
    user_message = f"{current_time}: {user_input}"
    # initiate llm
    client = OpenAI()
    messages = [
        {
            "role": "system",
            "content": f"{system_message_parameterdirections}",
        },
        {
            "role": "system",
            "content": f"{system_message_directions}",
        },
        {
            "role": "system",
            "content": f"{system_message_request}",
        },
        {
            "role": "user",
            "content": f"{user_message}",
        },
    ]

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.5,
    )

    make_action = response.choices[0].message.content

    # Save the output to a file
    with open("llm_output.txt", "w") as file:
        file.write(make_action)

    exec(make_action)


if __name__ == "__main__":
    add_new_event()
